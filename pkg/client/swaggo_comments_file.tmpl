
//GENERATED FILE -- DO NOT EDIT
//base template generated in github.com/SENERGY-Platform/permissions-v2 root dir, with 'go generate ./...'
//result file may be generated by client.GenerateGoFileWithSwaggoCommentsForPermissionsRequestsForwarding()

/*
 * Copyright 2024 InfAI (CC SES)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {{.PackageName}}




func GeneratedSwagger(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedListTopics godoc
// @Summary      lists topics with their configuration
// @Description  lists topics with their configuration, requesting user must be admin
// @Tags         topics
// @Security Bearer
// @Param        limit query integer false "limits size of result; 0 means unlimited"
// @Param        offset query integer false "offset to be used in combination with limit"
// @Produce      json
// @Success      200 {array}  model.Topic
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/topics [get]
func GeneratedListTopics(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedGetTopic godoc
// @Summary      get topic config
// @Description  get topic config, requesting user must be admin
// @Tags         topics
// @Security Bearer
// @Param        id path string true "Topic Id"
// @Produce      json
// @Success      200 {object}  model.Topic
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      404
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/topics/{id} [get]
func GeneratedGetTopic(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedSetTopic godoc
// @Summary      set topic config
// @Description  set topic config, requesting user must be admin
// @Tags         topics
// @Accept       json
// @Produce      json
// @Security Bearer
// @Param        id path string true "Topic Id"
// @Param        message body model.Topic true "Topic"
// @Success      200 {object}  model.Topic
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      404
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/topics/{id} [put]
func GeneratedSetTopic(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedSetTopicByPost godoc
// @Summary      set topic config
// @Description  set topic config, requesting user must be admin
// @Tags         topics
// @Accept       json
// @Produce      json
// @Security Bearer
// @Param        message body model.Topic true "Topic"
// @Success      200 {object}  model.Topic
// @Success      202 {object}  model.Topic
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      404
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/topics [POST]
func GeneratedSetTopicByPost(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedDeleteTopic godoc
// @Summary      remove topic config
// @Description  remove topic config, requesting user must be admin
// @Tags         topics
// @Security Bearer
// @Param        id path string true "Topic Id"
// @Success      200
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      404
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/topics/{id} [delete]
func GeneratedDeleteTopic(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedListComputedPermissions godoc
// @Summary      list the computed permissions to resources of the given topic and ids
// @Description  list the computed permissions to resources of the given topic and ids, group and user permissions are merged, unknown ids will get entries in the result
// @Tags         permissions, check, list
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        ids query string true "Resource Ids, comma seperated"
// @Produce      json
// @Success      200 {array} model.ComputedPermissions
// @Failure      400
// @Failure      401
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/permissions/{topic} [get]
func GeneratedListComputedPermissions(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedQueryListComputedPermissions godoc
// @Summary      list the computed permissions to resources of the given topic and ids
// @Description  list the computed permissions to resources of the given topic and ids, group and user permissions are merged, unknown ids will get entries in the result
// @Tags         permissions, check, list, query
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        ids body []string true "Resource Ids"
// @Produce      json
// @Success      200 {array} model.ComputedPermissions
// @Failure      400
// @Failure      401
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/query/permissions/{topic} [post]
func GeneratedQueryListComputedPermissions(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedCheckPermission godoc
// @Summary      check permission
// @Description  check permission
// @Tags         check
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        id path string true "Resource Id"
// @Param        permissions query string false "checked permissions in the form of 'rwxa', defaults to 'r'"
// @Produce      json
// @Success      200 {object} bool
// @Failure      400
// @Failure      401
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/check/{topic}/{id} [get]
func GeneratedCheckPermission(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedCheckMultiplePermissions godoc
// @Summary      check multiple permissions
// @Description  check multiple permissions
// @Tags         check
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        ids query string true "Resource Ids, comma seperated"
// @Param        permissions query string false "checked permissions in the form of 'rwxa', defaults to 'r'"
// @Produce      json
// @Success      200 {object} map[string]bool
// @Failure      400
// @Failure      401
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/check/{topic} [get]
func GeneratedCheckMultiplePermissions(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedListAccessibleResourceIds godoc
// @Summary      list accessible resource ids
// @Description  list accessible resource ids
// @Tags         accessible, resource
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        permissions query string false "checked permissions in the form of 'rwxa', defaults to 'r'"
// @Param        limit query integer false "limits size of result; 0 means unlimited"
// @Param        offset query integer false "offset to be used in combination with limit"
// @Produce      json
// @Success      200 {array} string
// @Failure      400
// @Failure      401
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/accessible/{topic} [get]
func GeneratedListAccessibleResourceIds(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedListResourcesWithAdminPermission godoc
// @Summary      lists resources the user has admin rights to
// @Description  lists resources the user has admin rights to
// @Tags         manage, resource
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        limit query integer false "limits size of result; 0 means unlimited"
// @Param        offset query integer false "offset to be used in combination with limit"
// @Produce      json
// @Success      200 {array}  model.Resource
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/manage/{topic} [get]
func GeneratedListResourcesWithAdminPermission(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedGetResource godoc
// @Summary      get resource
// @Description  get resource, requesting user must have admin right  on the resource
// @Tags         manage, resource
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        id path string true "Resource Id"
// @Produce      json
// @Success      200 {object}  model.Resource
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/manage/{topic}/{id} [get]
func GeneratedGetResource(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedDeleteResource godoc
// @Summary      delete resource
// @Description  delete resource, requesting user must have admin right on the resource, topic must have NoCqrs=true
// @Tags         manage, resource
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        id path string true "Resource Id"
// @Success      200 {object}  model.Resource
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/manage/{topic}/{id} [delete]
func GeneratedDeleteResource(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedSetPermission godoc
// @Summary      set resource rights
// @Description  get resource rights, requesting user must have admin right
// @Tags         manage, resource-rights
// @Security Bearer
// @Param        topic path string true "Topic Id"
// @Param        id path string true "Resource Id"
// @Param        wait query bool false "if set to true, the response will be sent after the corresponding kafka done signal has been received"
// @Param        message body model.ResourcePermissions true "Topic"
// @Accept       json
// @Produce      json
// @Success      200 {object}  model.ResourcePermissions
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/manage/{topic}/{id} [put]
func GeneratedSetPermission(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



// GeneratedAdminListResourceIds godoc
// @Summary      lists resource ids in topic
// @Description  lists resource ids in topic, requesting user must be in admin group
// @Tags         topics, resources, admin
// @Security Bearer
// @Param        limit query integer false "limits size of result; 0 means unlimited"
// @Param        offset query integer false "offset to be used in combination with limit"
// @Produce      json
// @Success      200 {array}  string
// @Failure      400
// @Failure      401
// @Failure      403
// @Failure      500
// @Router       /{{.PrefixWithoutSlash}}/admin/resources/{topic} [get]
func GeneratedAdminListResourceIds(){
	//this method is only used as anchor for swagger documentation
	panic("this method is only used as anchor for swagger documentation")
}



