// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplatepermissionsv2 = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "checks health and reachability of the service",
                "tags": [
                    "health"
                ],
                "summary": "health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/accessible/{topic}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "list accessible resource ids",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accessible",
                    "resource"
                ],
                "summary": "list accessible resource ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "checked permissions in the form of 'rwxa', defaults to 'r'",
                        "name": "permissions",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "limits size of result; 0 means unlimited",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset to be used in combination with limit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/load/permission-search": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "load rights from permission-search, requesting user must have admin right",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "load rights from permission-search",
                "parameters": [
                    {
                        "description": "load configuration",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AdminLoadPermSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "update count",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/resources/{topic}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "lists resource ids in topic, requesting user must be in admin group",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topics",
                    "resources",
                    "admin"
                ],
                "summary": "lists resource ids in topic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limits size of result; 0 means unlimited",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset to be used in combination with limit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/topics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "lists topics with their configuration, requesting user must be admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topics"
                ],
                "summary": "lists topics with their configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limits size of result; 0 means unlimited",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset to be used in combination with limit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Topic"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "set topic config, requesting user must be admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topics"
                ],
                "summary": "set topic config",
                "parameters": [
                    {
                        "description": "Topic",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/admin/topics/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get topic config, requesting user must be admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topics"
                ],
                "summary": "get topic config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "set topic config, requesting user must be admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "topics"
                ],
                "summary": "set topic config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Topic",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "remove topic config, requesting user must be admin",
                "tags": [
                    "topics"
                ],
                "summary": "remove topic config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/check/{topic}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "check multiple permissions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "check"
                ],
                "summary": "check multiple permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Ids, comma seperated",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "checked permissions in the form of 'rwxa', defaults to 'r'",
                        "name": "permissions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/check/{topic}/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "check permission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "check"
                ],
                "summary": "check permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "checked permissions in the form of 'rwxa', defaults to 'r'",
                        "name": "permissions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "checks health and reachability of the service",
                "tags": [
                    "health"
                ],
                "summary": "health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/manage/{topic}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "lists resources the user has admin rights to",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manage",
                    "resource"
                ],
                "summary": "lists resources the user has admin rights to",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "limits size of result; 0 means unlimited",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset to be used in combination with limit",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Resource"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/manage/{topic}/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get resource, requesting user must have admin right  on the resource",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manage",
                    "resource"
                ],
                "summary": "get resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Resource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get resource rights, requesting user must have admin right",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manage",
                    "resource-rights"
                ],
                "summary": "set resource rights",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "if set to true, the response will be sent after the corresponding kafka done signal has been received",
                        "name": "wait",
                        "in": "query"
                    },
                    {
                        "description": "Topic",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ResourcePermissions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ResourcePermissions"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "delete resource, requesting user must have admin right on the resource, topic must have NoCqrs=true",
                "tags": [
                    "manage",
                    "resource"
                ],
                "summary": "delete resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Resource"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/permissions/{topic}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "list the computed permissions to resources of the given topic and ids, group and user permissions are merged, unknown ids will get entries in the result",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions",
                    "check",
                    "list"
                ],
                "summary": "list the computed permissions to resources of the given topic and ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource Ids, comma seperated",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ComputedPermissions"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/query/permissions/{topic}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "list the computed permissions to resources of the given topic and ids, group and user permissions are merged, unknown ids will get entries in the result",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions",
                    "check",
                    "list",
                    "query"
                ],
                "summary": "list the computed permissions to resources of the given topic and ids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic Id",
                        "name": "topic",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource Ids",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ComputedPermissions"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AdminLoadPermSearchRequest": {
            "type": "object",
            "properties": {
                "dry_run": {
                    "description": "true -\u003e log changes without executing them",
                    "type": "boolean"
                },
                "overwrite_existing": {
                    "description": "false -\u003e skip known elements; true -\u003e force state of permission-search",
                    "type": "boolean"
                },
                "permission_search_url": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "topic_id": {
                    "description": "topic as used in permissions-v2",
                    "type": "string"
                }
            }
        },
        "model.ComputedPermissions": {
            "type": "object",
            "properties": {
                "administrate": {
                    "type": "boolean"
                },
                "execute": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "write": {
                    "type": "boolean"
                }
            }
        },
        "model.PermissionsMap": {
            "type": "object",
            "properties": {
                "administrate": {
                    "type": "boolean"
                },
                "execute": {
                    "type": "boolean"
                },
                "read": {
                    "type": "boolean"
                },
                "write": {
                    "type": "boolean"
                }
            }
        },
        "model.Resource": {
            "type": "object",
            "properties": {
                "group_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                },
                "id": {
                    "type": "string"
                },
                "role_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                },
                "topic_id": {
                    "type": "string"
                },
                "user_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                }
            }
        },
        "model.ResourcePermissions": {
            "type": "object",
            "properties": {
                "group_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                },
                "role_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                },
                "user_permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.PermissionsMap"
                    }
                }
            }
        },
        "model.Topic": {
            "type": "object",
            "properties": {
                "default_permissions": {
                    "$ref": "#/definitions/model.ResourcePermissions"
                },
                "ensure_kafka_topic_init": {
                    "type": "boolean"
                },
                "ensure_kafka_topic_init_partition_number": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_update_unix_timestamp": {
                    "description": "should be ignored by the user; is set by db",
                    "type": "integer"
                },
                "publish_to_kafka_topic": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfopermissionsv2 holds exported Swagger Info so clients can modify it
var SwaggerInfopermissionsv2 = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Permissions API",
	Description:      "",
	InfoInstanceName: "permissionsv2",
	SwaggerTemplate:  docTemplatepermissionsv2,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfopermissionsv2.InstanceName(), SwaggerInfopermissionsv2)
}
